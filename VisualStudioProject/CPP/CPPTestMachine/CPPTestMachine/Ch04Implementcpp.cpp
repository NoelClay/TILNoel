/*
<1> 아이디어를 코드로 바꾸는 구현

<피지컬로 승부하기>
코딩에서 피지컬이란 구현하기 까다로운 문제들을 짜는 능력을 의미함.
구현이 알고리즘이냐고 물어보면 알고리즘은 아니지만, 알고리즘을 코드화 하기위해서 반드시 필요한 능력이 구현이다.
취업용 코딩테스트에서는 구현문제가 자주나오기에 다룸.

완전 탐색과 시뮬레이션은 모두 구현으로 묶어서 다룸.
완전탐색: 모든 경우의 수를 주저 없이 다 계산하는 방법.
시뮬레이션: 문제에서 제시한 알고리즘을 한 단계씩 차례로 직접 수행하도록 구현하는 방식.

<구현 시 고려해야 할 메모리 제약 사항>
int 범위를 넘어가는건 long long 사용하고, long long 범위를 넘어가는 경우는 거의 없다고 봐야한다.

메모리 제약은 보통 작게는 128mb 부터 크게는 512mb 까지 메모리 사용량을 제한한다.

<채점 환경>
보통 일반적으로 시간 제한과 메모리 제한은 각각 1초 128mb를 건다.
대강 2천만번의 연산을 수행하면 1초 정도가 걸린다고 본다.
만약 N이 백만이라면 NlogN은 약 2천만번이 나온다.

문제에서 주어진 시간 제한과 데이터 용량 제한을 확인하고,
어떤 시간복잡도로 얼만큼 메모리를 차지하며 문제를 구현해야할지 고려해야한다.

*/

/* 4-1 상하좌우
여행가 A는 N x N 크기의 정사각형 공간 위에 서 있다. 이 공간은 1 x 1 크기의 정사각형으로 나누어져 있다.
가장 왼쪽 위는 (1,1) 이고 가장 오른쪽 아래는 (N,N)이다. 여행가 A는 상하좌우 방향으로 이동할 수 있으며, 시작 좌표는 항상
(1,1)이다. 우리 앞에는 여행가 a가 이동할 계획이 적힌 계획서가 놓여 있다.
계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L,R,U,D 중 하나의 문자가 반복적으로 적혀 있다.
각 문자는 왼쪽 오른쪽 위로 아래로 한칸씩 이동하라는 의미.
이때 여행가 A가 NxN 정사각형 공간을 벗어나는 움직임은 무시된다. 예시로 (1,1) 위치에서 L혹은 U를 만나면 그냥 무시하고 움직일 수 있는
문자가 오면 그때 움직인다.
*/
// 
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif

//
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif

//
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif

//
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif

//
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif

//
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif

//
//
#if 0
#include<iostream>
#include<vector>
using namespace std;

int main() {

}

#endif
